import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useGetUsers, useCreateUser } from '../hooks/useUsers';
import { userSchema, simpleUserSchema, safeValidateUser, safeValidateSimpleUser } from '../schemas/user.schema';

// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
const mockUsers = [
  { id: 1, name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', email: 'somchai@example.com', role: 'Admin' },
  { id: 2, name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', email: 'somying@example.com', role: 'User' },
  { id: 3, name: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏Ç‡∏¢‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', email: 'wichai@example.com', role: 'Manager' },
  { id: 4, name: '‡∏°‡∏≤‡∏•‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°', email: 'malee@example.com', role: 'User' },
  { id: 5, name: '‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å', email: 'prayuth@example.com', role: 'Developer' },
];

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏≤‡∏° JSONPlaceholder format)
const mockValidUser = {
  id: 1,
  name: "Leanne Graham",
  username: "Bret",
  email: "Sincere@april.biz",
  address: {
    street: "Kulas Light",
    suite: "Apt. 556",
    city: "Gwenborough",
    zipcode: "92998-3874",
    geo: {
      lat: "-37.3159",
      lng: "81.1496"
    }
  },
  phone: "1-770-736-8031 x56442",
  website: "https://hildegard.org",
  company: {
    name: "Romaguera-Crona",
    catchPhrase: "Multi-layered client-server neural-net",
    bs: "harness real-time e-markets"
  }
};

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î (email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
const mockInvalidUser = { ...mockValidUser, email: "not-an-email" };

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
const mockValidSimpleUser = {
  id: 1,
  name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
  email: "somchai@example.com",
  role: "Admin"
};

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î (id ‡πÄ‡∏õ‡πá‡∏ô string)
const mockInvalidSimpleUser = { ...mockValidSimpleUser, id: "1" };

const UsersPage: React.FC = () => {
  // üöÄ Day 4: State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');

  // üöÄ Day 7: ‡πÉ‡∏ä‡πâ Custom Hook ‡πÅ‡∏ó‡∏ô useQuery ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  const {
    data: apiUsers,
    isError,
    error,
    isFetching
  } = useGetUsers();

  // üöÄ Day 7: ‡πÉ‡∏ä‡πâ Custom Hook ‡πÅ‡∏ó‡∏ô useMutation ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  const createUserMutation = useCreateUser();

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  React.useEffect(() => {
    if (createUserMutation.isSuccess) {
      setName('');
      setEmail('');
      setUsername('');
    }
  }, [createUserMutation.isSuccess]);

  // Debug logging (simplified)
  if (process.env.NODE_ENV === 'development') {
    console.log('üîç UsersPage Status:', {
      users: apiUsers?.length || 0,
      isFetching,
      mutationPending: createUserMutation.isPending,
      hasError: isError
    });
  }

  // ‡∏ó‡∏î‡∏•‡∏≠‡∏á Zod Validation ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î (Day 2) - ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ
  useEffect(() => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£ log ‡∏ã‡πâ‡∏≥
    const hasRunValidation = sessionStorage.getItem('zodValidationRun');
    if (hasRunValidation) return;

    console.log('üöÄ Day 2-6 Workshop: Zod + React Query + Router Loaders + Actions');
    console.log('üìã Validating sample data...');

    // ‡∏ó‡∏î‡∏•‡∏≠‡∏á validation ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ
    const validResult = safeValidateSimpleUser(mockValidSimpleUser);
    const invalidResult = safeValidateSimpleUser(mockInvalidSimpleUser);

    console.log('‚úÖ Valid user check:', validResult.success ? 'PASS' : 'FAIL');
    console.log('‚ùå Invalid user check:', !invalidResult.success ? 'PASS (expected)' : 'FAIL');
    console.log('üéâ All validation tests completed!');

    // Mark as run to prevent duplicate logs
    sessionStorage.setItem('zodValidationRun', 'true');
  }, []);

  // üöÄ Day 4: Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!name.trim() || !email.trim() || !username.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏° schema
    createUserMutation.mutate({
      name: name.trim(),
      email: email.trim(),
      username: username.trim(),
      address: {
        street: 'N/A',
        suite: 'N/A',
        city: 'Bangkok',
        zipcode: '10110',
        geo: {
          lat: '13.7563',
          lng: '100.5018'
        }
      },
      phone: '02-xxx-xxxx',
      website: 'example.com',
      company: {
        name: 'Example Company',
        catchPhrase: 'Innovation at its best',
        bs: 'synergistic solutions'
      }
    });
  };

  // üöÄ Day 5: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ initial loading state ‡πÅ‡∏•‡πâ‡∏ß!
  // Loader ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß - component ‡∏à‡∏∞ render ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°

  // ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á error state ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö re-fetch ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
  if (isError) {
    return (
      <div>
        <h1>üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Users Page) - Day 5</h1>
        <div style={{
          padding: '20px',
          backgroundColor: '#f8d7da',
          borderRadius: '8px',
          border: '1px solid #f5c6cb',
          color: '#721c24'
        }}>
          <h3>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ re-fetch</h3>
          <p><strong>Error:</strong> {error?.message}</p>
          <p style={{ fontSize: '14px', marginTop: '10px' }}>
            ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Initial loading ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ Router Loader ‡πÅ‡∏•‡πâ‡∏ß
          </p>
          <button
            onClick={() => window.location.reload()}
            style={{
              padding: '8px 16px',
              backgroundColor: '#dc3545',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>
      </div>
    );
  }

  return (
    <div>
      <h1>üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Users Page) - Day 5</h1>
      <p>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å JSONPlaceholder API + React Query + Mutations + Router Loaders</p>

      {/* Day 5 Info */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#e8f5e8',
        borderRadius: '8px',
        border: '1px solid #c3e6cb'
      }}>
        <h3>üîó Day 5: React Router Loaders + React Query</h3>
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
          <span>üöÄ Render-as-You-Fetch Pattern:</span>
          <span style={{ color: '#28a745' }}>‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô component render!</span>
        </div>
        <p><strong>‡πÄ‡∏õ‡∏¥‡∏î DevTools (F12)</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π:</p>
        <ul>
          <li>‚úÖ Router Loader logs: "üîó Router Loader: Loading users..."</li>
          <li>‚úÖ ensureQueryData behavior: cache hit vs fetch</li>
          <li>‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ loading spinner ‡πÉ‡∏ô component ‡πÅ‡∏•‡πâ‡∏ß!</li>
          <li>‚úÖ Navigation ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ pre-loading</li>
        </ul>
        <p style={{ fontSize: '14px', color: '#666', marginTop: '10px' }}>
          üí° ‡∏•‡∏≠‡∏á‡πÑ‡∏õ‡∏°‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home ‡πÅ‡∏•‡∏∞ Users - ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ loading state ‡πÅ‡∏•‡πâ‡∏ß!
        </p>
      </div>

      {/* Day 4 Info */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#fff3cd',
        borderRadius: '8px',
        border: '1px solid #ffeaa7'
      }}>
        <h3>üíæ Day 4: Mutations (useMutation)</h3>
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
          <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Mutation:</span>
          {createUserMutation.isPending && <span style={{ color: '#007bff' }}>üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...</span>}
          {createUserMutation.isSuccess && <span style={{ color: '#28a745' }}>‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</span>}
          {createUserMutation.isError && <span style={{ color: '#dc3545' }}>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</span>}
          {createUserMutation.isIdle && <span style={{ color: '#6c757d' }}>‚è∏Ô∏è ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span>}
        </div>
        <p><strong>‡πÄ‡∏õ‡∏¥‡∏î DevTools (F12)</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π:</p>
        <ul>
          <li>‚úÖ POST requests ‡πÅ‡∏•‡∏∞ response handling</li>
          <li>‚úÖ Cache invalidation ‡πÅ‡∏•‡∏∞ automatic refetch</li>
          <li>‚úÖ Mutation states: idle, pending, success, error</li>
          <li>‚úÖ Form handling ‡πÅ‡∏•‡∏∞ optimistic updates</li>
        </ul>
      </div>

      {/* Day 6: Link to New Form */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#f0f8ff',
        borderRadius: '8px',
        border: '1px solid #b3d9ff'
      }}>
        <h3>üìù Day 6: Advanced Form with Actions</h3>
        <p>‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏î‡πâ‡∏ß‡∏¢ React Router Actions ‡πÅ‡∏•‡∏∞ Zod Validation!</p>
        <Link
          to="/users/new"
          style={{
            display: 'inline-block',
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            textDecoration: 'none',
            borderRadius: '5px',
            fontWeight: 'bold',
            marginTop: '10px'
          }}
        >
          üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (Advanced Form)
        </Link>
      </div>

      {/* Day 4: Create User Form */}
      <div style={{
        marginBottom: '30px',
        padding: '20px',
        backgroundColor: '#f8f9fa',
        borderRadius: '8px',
        border: '1px solid #dee2e6'
      }}>
        <h3>‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (Day 4 - Inline Form)</h3>
        <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '15px', maxWidth: '400px' }}>
          <div>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>‡∏ä‡∏∑‡πà‡∏≠:</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô John Doe"
              disabled={createUserMutation.isPending}
              style={{
                width: '100%',
                padding: '8px 12px',
                border: '1px solid #ced4da',
                borderRadius: '4px',
                fontSize: '14px'
              }}
            />
          </div>

          <div>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Username:</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô johndoe"
              disabled={createUserMutation.isPending}
              style={{
                width: '100%',
                padding: '8px 12px',
                border: '1px solid #ced4da',
                borderRadius: '4px',
                fontSize: '14px'
              }}
            />
          </div>

          <div>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô john@example.com"
              disabled={createUserMutation.isPending}
              style={{
                width: '100%',
                padding: '8px 12px',
                border: '1px solid #ced4da',
                borderRadius: '4px',
                fontSize: '14px'
              }}
            />
          </div>

          <button
            type="submit"
            disabled={createUserMutation.isPending || !name.trim() || !email.trim() || !username.trim()}
            style={{
              padding: '10px 20px',
              backgroundColor: createUserMutation.isPending ? '#6c757d' : '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: createUserMutation.isPending ? 'not-allowed' : 'pointer',
              transition: 'background-color 0.3s'
            }}
          >
            {createUserMutation.isPending ? 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...' : '‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}
          </button>

          {createUserMutation.isError && (
            <div style={{
              padding: '10px',
              backgroundColor: '#f8d7da',
              color: '#721c24',
              borderRadius: '4px',
              border: '1px solid #f5c6cb'
            }}>
              ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {createUserMutation.error?.message}
            </div>
          )}

          {createUserMutation.isSuccess && (
            <div style={{
              padding: '10px',
              backgroundColor: '#d4edda',
              color: '#155724',
              borderRadius: '4px',
              border: '1px solid #c3e6cb'
            }}>
              ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            </div>
          )}
        </form>
      </div>

      {/* Day 3 Info */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#d4edda',
        borderRadius: '8px',
        border: '1px solid #c3e6cb'
      }}>
        <h3>‚ö°Ô∏è Day 3: React Query (useQuery)</h3>
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
          <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
          {isFetching && <span style={{ color: '#007bff' }}>üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</span>}
          {!isFetching && <span style={{ color: '#28a745' }}>‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</span>}
        </div>
        <p><strong>‡πÄ‡∏õ‡∏¥‡∏î DevTools (F12)</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π:</p>
        <ul>
          <li>‚úÖ API calls ‡πÅ‡∏•‡∏∞ response validation</li>
          <li>‚úÖ React Query caching behavior</li>
          <li>‚úÖ Loading ‡πÅ‡∏•‡∏∞ Error states</li>
          <li>‚úÖ Server State vs Client State</li>
        </ul>
      </div>

      {/* Day 2 Info */}
      <div style={{
        marginBottom: '20px',
        padding: '15px',
        backgroundColor: '#e3f2fd',
        borderRadius: '8px',
        border: '1px solid #2196f3'
      }}>
        <h3>üîç Day 2: DTO ‡πÅ‡∏•‡∏∞ Zod Validation</h3>
        <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ validate ‡∏î‡πâ‡∏ß‡∏¢ Zod schemas ‡πÅ‡∏•‡πâ‡∏ß</p>
        <ul>
          <li>‚úÖ Full User Schema (JSONPlaceholder format)</li>
          <li>‚úÖ Simple User Schema (Mock data)</li>
          <li>‚úÖ Runtime validation ‡πÅ‡∏•‡∏∞ TypeScript types</li>
        </ul>
      </div>

      {/* API Users Section */}
      <div style={{ marginTop: '20px' }}>
        <h2>üåê ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API (JSONPlaceholder)</h2>
        <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {apiUsers?.length || 0} ‡∏Ñ‡∏ô</p>
        <div style={{ display: 'grid', gap: '15px' }}>
          {apiUsers?.map(user => (
            <div
              key={user.id}
              style={{
                padding: '15px',
                border: '1px solid #28a745',
                borderRadius: '8px',
                backgroundColor: '#f8fff9'
              }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <div>
                  <h3 style={{ margin: '0 0 5px 0' }}>{user.name}</h3>
                  <p style={{ margin: '0 0 5px 0', color: '#666' }}>@{user.username}</p>
                  <p style={{ margin: '0 0 5px 0', color: '#666' }}>{user.email}</p>
                  <p style={{ margin: '0 0 5px 0', color: '#666' }}>
                    üìç {user.address.city}, {user.address.street}
                  </p>
                  {user.company && (
                    <p style={{ margin: '0 0 5px 0', color: '#666' }}>
                      üè¢ {user.company.name}
                    </p>
                  )}
                </div>
                <Link
                  to={`/users/${user.id}`}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#28a745',
                    color: 'white',
                    textDecoration: 'none',
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                >
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </Link>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Mock Users Section (Day 2) */}
      <div style={{ marginTop: '30px' }}>
        <h2>üß™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (Day 2 - Zod Testing)</h2>
        <div style={{ display: 'grid', gap: '15px' }}>
          {mockUsers.map(user => (
            <div 
              key={user.id} 
              style={{ 
                padding: '15px', 
                border: '1px solid #ddd', 
                borderRadius: '8px',
                backgroundColor: '#f9f9f9'
              }}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <div>
                  <h3 style={{ margin: '0 0 5px 0' }}>{user.name}</h3>
                  <p style={{ margin: '0 0 5px 0', color: '#666' }}>{user.email}</p>
                  <span 
                    style={{ 
                      padding: '2px 8px', 
                      backgroundColor: '#007bff', 
                      color: 'white', 
                      borderRadius: '4px', 
                      fontSize: '12px' 
                    }}
                  >
                    {user.role}
                  </span>
                </div>
                <Link 
                  to={`/users/${user.id}`}
                  style={{
                    padding: '8px 16px',
                    backgroundColor: '#28a745',
                    color: 'white',
                    textDecoration: 'none',
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                >
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </Link>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default UsersPage;
