import { z } from 'zod';
import { userSchema, createUserSchema } from '../schemas/user.schema';

// Create types inline to avoid import issues
type User = z.infer<typeof userSchema>;
type CreateUser = z.infer<typeof createUserSchema>;

const API_BASE_URL = 'https://jsonplaceholder.typicode.com';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö array ‡∏Ç‡∏≠‡∏á user
const usersSchema = z.array(userSchema);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function getUsers(): Promise<User[]> {
  console.log('üåê Fetching users from API...');
  
  const res = await fetch(`${API_BASE_URL}/users`);
  
  if (!res.ok) {
    throw new Error(`Failed to fetch users: ${res.status} ${res.statusText}`);
  }
  
  const data = await res.json();
  console.log('üì¶ Raw API data:', data);
  
  try {
    // Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ Zod
    const validatedUsers = usersSchema.parse(data);
    console.log('‚úÖ Data validation successful:', validatedUsers.length, 'users');
    return validatedUsers;
  } catch (error) {
    console.error('‚ùå Data validation failed:', error);
    throw new Error('Invalid data format received from API');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
export async function getUser(userId: number): Promise<User> {
  console.log(`üåê Fetching user ${userId} from API...`);

  const res = await fetch(`${API_BASE_URL}/users/${userId}`);

  if (!res.ok) {
    if (res.status === 404) {
      throw new Error(`User with ID ${userId} not found`);
    }
    throw new Error(`Failed to fetch user: ${res.status} ${res.statusText}`);
  }

  const data = await res.json();
  console.log(`üì¶ Raw API data for user ${userId}:`, data);

  try {
    // Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ Zod
    const validatedUser = userSchema.parse(data);
    console.log(`‚úÖ User ${userId} validation successful:`, validatedUser);
    return validatedUser;
  } catch (error) {
    console.error(`‚ùå User ${userId} validation failed:`, error);
    throw new Error('Invalid user data format received from API');
  }
}

// üöÄ Day 5: Alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö loader (‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤)
export const getUserById = getUser;

// üöÄ Day 4: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (POST)
export async function createUser(newUser: CreateUser): Promise<User> {
  console.log('üåê Creating new user:', newUser);

  const res = await fetch(`${API_BASE_URL}/users`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(newUser),
  });

  if (!res.ok) {
    throw new Error(`Failed to create user: ${res.status} ${res.statusText}`);
  }

  const data = await res.json();
  console.log('üì¶ Created user response:', data);

  try {
    // ‡πÅ‡∏°‡πâ API ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡∏Ñ‡∏ß‡∏£ validate ‡∏î‡πâ‡∏ß‡∏¢
    // JSONPlaceholder ‡∏à‡∏∞ return id ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ userSchema ‡πÑ‡∏î‡πâ
    const validatedUser = userSchema.parse(data);
    console.log('‚úÖ User creation successful:', validatedUser);
    return validatedUser;
  } catch (error) {
    console.error('‚ùå User creation validation failed:', error);
    throw new Error('Invalid user data format received from API');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• posts ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
const postSchema = z.object({
  userId: z.number(),
  id: z.number(),
  title: z.string(),
  body: z.string(),
});

const postsSchema = z.array(postSchema);
export type Post = z.infer<typeof postSchema>;

export async function getUserPosts(userId: number): Promise<Post[]> {
  console.log(`üåê Fetching posts for user ${userId}...`);
  
  const res = await fetch(`${API_BASE_URL}/posts?userId=${userId}`);
  
  if (!res.ok) {
    throw new Error(`Failed to fetch posts: ${res.status} ${res.statusText}`);
  }
  
  const data = await res.json();
  
  try {
    const validatedPosts = postsSchema.parse(data);
    console.log(`‚úÖ Posts validation successful: ${validatedPosts.length} posts for user ${userId}`);
    return validatedPosts;
  } catch (error) {
    console.error(`‚ùå Posts validation failed:`, error);
    throw new Error('Invalid posts data format received from API');
  }
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£ delay (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π loading state)
export const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
