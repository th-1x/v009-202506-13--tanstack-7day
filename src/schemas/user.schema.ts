import { z } from 'zod';

// ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á schema ‡∏¢‡πà‡∏≠‡∏¢‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
const addressSchema = z.object({
  street: z.string(),
  suite: z.string(),
  city: z.string(),
  zipcode: z.string(),
});

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Geo coordinates (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å JSONPlaceholder)
const geoSchema = z.object({
  lat: z.string(),
  lng: z.string(),
});

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Company (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å JSONPlaceholder)
const companySchema = z.object({
  name: z.string(),
  catchPhrase: z.string(),
  bs: z.string(),
});

// Address schema ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (‡∏£‡∏ß‡∏° geo)
const fullAddressSchema = addressSchema.extend({
  geo: geoSchema,
});

// User Schema ‡∏´‡∏•‡∏±‡∏Å - ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å JSONPlaceholder API
export const userSchema = z.object({
  id: z.number().int().positive({ message: "ID must be a positive integer" }),
  name: z.string().min(1, { message: "Name is required" }),
  username: z.string().min(1, { message: "Username is required" }),
  email: z.string().email({ message: "Invalid email format" }),
  address: fullAddressSchema,
  phone: z.string().optional(),
  website: z.string().optional(),
  company: companySchema.optional(),
});

// User Schema ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mock data ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)
export const simpleUserSchema = z.object({
  id: z.number().int().positive(),
  name: z.string().min(1, { message: "Name is required" }),
  email: z.string().email({ message: "Invalid email format" }),
  role: z.string(),
  phone: z.string().optional(),
  department: z.string().optional(),
  joinDate: z.string().optional(),
});

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ server ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ)
export const createUserSchema = userSchema.omit({ id: true });

// ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ DTO ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üéâ
export type User = z.infer<typeof userSchema>;
export type CreateUser = z.infer<typeof createUserSchema>;
export type SimpleUser = z.infer<typeof simpleUserSchema>;

// Helper functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ validate
export const validateUser = (data: unknown) => {
  return userSchema.parse(data);
};

export const safeValidateUser = (data: unknown) => {
  return userSchema.safeParse(data);
};

export const validateSimpleUser = (data: unknown) => {
  return simpleUserSchema.parse(data);
};

export const safeValidateSimpleUser = (data: unknown) => {
  return simpleUserSchema.safeParse(data);
};
